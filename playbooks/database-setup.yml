---
- name: TP MySQL simple (sans modifier ton docker-compose)
  hosts: databases
  gather_facts: false

  vars:
    # MySQL sera installé et démarré localement sur l'hôte db1 (sans systemd)
    mysql_login_host: "127.0.0.1"
    mysql_login_port: 3306
    mysql_root_user: "root"
    mysql_root_password: "rootpass"

    # Objet du TP
    db_name: "demo_tp"
    db_user: "demo"
    db_pass: "demopass"

  pre_tasks:
    - name: Installer MariaDB et dépendances (sur db1)
      apt:
        name:
          - mariadb-server
          - mariadb-client
          - python3-pymysql
        state: present
        update_cache: yes
      become: yes

    - name: Préparer le dossier de socket MySQL
      file:
        path: /run/mysqld
        state: directory
        owner: mysql
        group: mysql
        mode: '0755'
      become: yes

    - name: Démarrer MariaDB (environnement sans systemd)
      shell: |
        set -e
        if ! pgrep -x mysqld >/dev/null; then
          mysqld_safe --datadir=/var/lib/mysql \
                      --pid-file=/run/mysqld/mysqld.pid \
                      --socket=/run/mysqld/mysqld.sock \
                      --bind-address=127.0.0.1 &
          sleep 5
        fi
      args:
        executable: /bin/bash
      become: yes

    - name: Attendre que MySQL réponde en local
      wait_for:
        host: "{{ mysql_login_host }}"
        port: "{{ mysql_login_port }}"
        delay: 2
        timeout: 60

  tasks:
    - name: Vérifier l'accès root via mot de passe
      community.mysql.mysql_info:
        login_unix_socket: /run/mysqld/mysqld.sock
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"
      register: root_pw_ok
      changed_when: false
      failed_when: false

    - name: Définir le mot de passe root via socket local (si non défini)
      community.mysql.mysql_user:
        name: "{{ mysql_root_user }}"
        host: localhost
        password: "{{ mysql_root_password }}"
        login_unix_socket: /run/mysqld/mysqld.sock
        check_implicit_admin: yes
        state: present
      become: yes
      when: root_pw_ok.version is not defined

    - name: Créer la base {{ db_name }}
      community.mysql.mysql_db:
        name: "{{ db_name }}"
        state: present
        login_unix_socket: /run/mysqld/mysqld.sock
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"

    - name: Créer l'utilisateur {{ db_user }} avec droits sur {{ db_name }}
      community.mysql.mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_pass }}"
        host: "%"
        priv: "{{ db_name }}.*:ALL"
        state: present
        login_unix_socket: /run/mysqld/mysqld.sock
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"

    - name: Vérifier les bases
      community.mysql.mysql_query:
        login_unix_socket: /run/mysqld/mysqld.sock
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"
        query: "SHOW DATABASES;"
      register: dbs

    - name: Afficher les bases renvoyées par MySQL
      debug:
        var: dbs.query_result
      delegate_to: localhost

    - name: Test de connexion avec l'utilisateur applicatif
      community.mysql.mysql_query:
        login_unix_socket: /run/mysqld/mysqld.sock
        login_user: "{{ db_user }}"
        login_password: "{{ db_pass }}"
        query: "SELECT CURRENT_USER() AS whoami;"
      register: whoami

    - name: Afficher le user MySQL utilisé
      debug:
        var: whoami.query_result
      delegate_to: localhost
